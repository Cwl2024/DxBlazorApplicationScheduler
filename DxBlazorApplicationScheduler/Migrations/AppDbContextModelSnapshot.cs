// <auto-generated />
using System;
using DxBlazorApplicationScheduler.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DxBlazorApplicationScheduler.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.AppGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppGroups");
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<int?>("AppGroupId")
                        .HasColumnType("int");

                    b.Property<string>("AppointmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Label")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Recurrence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Resources")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppGroupId");

                    b.HasIndex("ResourceId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.Group", b =>
                {
                    b.Property<int>("Iid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iid"));

                    b.Property<string>("Cgrpdesc")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CGRPDESC");

                    b.Property<int>("Ilastupdid")
                        .HasColumnType("int")
                        .HasColumnName("ILASTUPDID");

                    b.Property<DateTime>("Tlastupd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("TLASTUPD")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Iid")
                        .HasName("IID3");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Iid"), false);

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundCss")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TextCss")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.ResourceGroup", b =>
                {
                    b.Property<int>("ResourceGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceGroupId"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.HasKey("ResourceGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceGroups");
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.User", b =>
                {
                    b.Property<int>("Iid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iid"));

                    b.Property<DateTime>("Aendat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("AENDAT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Aenuserid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("AENUSERID");

                    b.Property<DateTime>("Anldat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ANLDAT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Anluserid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ANLUSERID");

                    b.Property<string>("Cfullname")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("CFULLNAME");

                    b.Property<string>("Clastupdid")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CLASTUPDID");

                    b.Property<string>("Cpassword")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CPASSWORD");

                    b.Property<string>("Cuserid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CUSERID");

                    b.Property<string>("Email")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("EMAIL");

                    b.Property<int?>("FilistId")
                        .HasColumnType("int")
                        .HasColumnName("FILIST_ID");

                    b.Property<bool?>("Idatabaseutilities")
                        .HasColumnType("bit")
                        .HasColumnName("IDATABASEUTILITIES");

                    b.Property<bool?>("Iprintreports")
                        .HasColumnType("bit")
                        .HasColumnName("IPRINTREPORTS");

                    b.Property<bool?>("Isystemsettings")
                        .HasColumnType("bit")
                        .HasColumnName("ISYSTEMSETTINGS");

                    b.Property<bool?>("Iusergroups")
                        .HasColumnType("bit")
                        .HasColumnName("IUSERGROUPS");

                    b.Property<bool?>("Iuserpreferences")
                        .HasColumnType("bit")
                        .HasColumnName("IUSERPREFERENCES");

                    b.Property<bool?>("Iusers")
                        .HasColumnType("bit")
                        .HasColumnName("IUSERS");

                    b.Property<bool?>("Lusedplist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("LUSEDPLIST");

                    b.Property<bool?>("Lwgrsperr")
                        .HasColumnType("bit")
                        .HasColumnName("LWGRSPERR");

                    b.Property<string>("Sendmailcc")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("SENDMAILCC");

                    b.Property<string>("Smtppassw")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("SMTPPASSW");

                    b.Property<string>("Smtpsender")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("SMTPSENDER");

                    b.Property<string>("Smtpuser")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("SMTPUSER");

                    b.Property<DateTime?>("Tlastupd")
                        .HasColumnType("datetime")
                        .HasColumnName("TLASTUPD");

                    b.HasKey("Iid")
                        .HasName("IID");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Iid"), false);

                    b.HasIndex(new[] { "Cuserid" }, "CUSERID");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.Usgrlink", b =>
                {
                    b.Property<int>("Iid")
                        .HasColumnType("int")
                        .HasColumnName("IID");

                    b.Property<int>("Igroupid")
                        .HasColumnType("int")
                        .HasColumnName("IGROUPID");

                    b.Property<int>("Ilastupdid")
                        .HasColumnType("int")
                        .HasColumnName("ILASTUPDID");

                    b.Property<int>("Iorder")
                        .HasColumnType("int")
                        .HasColumnName("IORDER");

                    b.Property<int>("Iuserid")
                        .HasColumnType("int")
                        .HasColumnName("IUSERID");

                    b.Property<DateTime>("Tlastupd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("TLASTUPD")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Iid")
                        .HasName("IID2");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Iid"), false);

                    b.HasIndex(new[] { "Igroupid" }, "IGROUPID");

                    b.HasIndex(new[] { "Iuserid" }, "IUSERID");

                    b.ToTable("usgrlink", (string)null);
                });

            modelBuilder.Entity("ResourceResource", b =>
                {
                    b.Property<int>("ChildrenId")
                        .HasColumnType("int");

                    b.Property<int>("ParentsId")
                        .HasColumnType("int");

                    b.HasKey("ChildrenId", "ParentsId");

                    b.HasIndex("ParentsId");

                    b.ToTable("ResourceResource");
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.Appointment", b =>
                {
                    b.HasOne("DxBlazorApplicationScheduler.Models.AppGroup", null)
                        .WithMany("Appointments")
                        .HasForeignKey("AppGroupId");

                    b.HasOne("DxBlazorApplicationScheduler.Models.Resource", "Resource")
                        .WithMany("Appointments")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("FK_Appointments_Resources");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.Resource", b =>
                {
                    b.HasOne("DxBlazorApplicationScheduler.Models.User", null)
                        .WithMany("Resources")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.ResourceGroup", b =>
                {
                    b.HasOne("DxBlazorApplicationScheduler.Models.AppGroup", "Group")
                        .WithMany("ResourceGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DxBlazorApplicationScheduler.Models.Resource", "Resource")
                        .WithMany("ResourceGroups")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.Usgrlink", b =>
                {
                    b.HasOne("DxBlazorApplicationScheduler.Models.Group", "Igroup")
                        .WithMany("Usgrlinks")
                        .HasForeignKey("Igroupid")
                        .IsRequired()
                        .HasConstraintName("Relation_201");

                    b.HasOne("DxBlazorApplicationScheduler.Models.User", "Iuser")
                        .WithMany("Usgrlinks")
                        .HasForeignKey("Iuserid")
                        .IsRequired()
                        .HasConstraintName("Relation_200");

                    b.Navigation("Igroup");

                    b.Navigation("Iuser");
                });

            modelBuilder.Entity("ResourceResource", b =>
                {
                    b.HasOne("DxBlazorApplicationScheduler.Models.Resource", null)
                        .WithMany()
                        .HasForeignKey("ChildrenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DxBlazorApplicationScheduler.Models.Resource", null)
                        .WithMany()
                        .HasForeignKey("ParentsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.AppGroup", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ResourceGroups");
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.Group", b =>
                {
                    b.Navigation("Usgrlinks");
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.Resource", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ResourceGroups");
                });

            modelBuilder.Entity("DxBlazorApplicationScheduler.Models.User", b =>
                {
                    b.Navigation("Resources");

                    b.Navigation("Usgrlinks");
                });
#pragma warning restore 612, 618
        }
    }
}
